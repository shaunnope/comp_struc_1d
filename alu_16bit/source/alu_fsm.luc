/**
test circuit FSM for two 16b inputs
   Inputs: clk, rst, irq signals
   Outputs: alufn signal, mode and case indices, slowClock value
*/
module alu_fsm (
    input clk,  // slowClock
    input rst,  // reset
    input irq,  // interuppt it no match
    input mIn[5],
    output index[5]
  ) {
  
  .clk(clk){    
    .rst(rst){
      counter xClock(#SIZE(2), #DIV(0));
      
      fsm testAluFsm = {STEP, HALT};
      
      // holding values
      dff caseidx[5];  // case index
    }
    edge_detector clockEdge[2](#RISE(1), #FALL(1));    
  }
  

  always {
    clockEdge.in = xClock.value;
    
    if ((rst | mIn[0] | mIn[1]) & 1){ // reset cases
        caseidx.d = 5b00000;
        testAluFsm.d = testAluFsm.STEP;
      
    } else if (irq & 1) {
      testAluFsm.d = testAluFsm.HALT;
    } else if (testAluFsm.q == testAluFsm.HALT && (mIn[2] & 1)) {
      caseidx.d = caseidx.q + 1;
      testAluFsm.d = testAluFsm.STEP;
    }
    else if (testAluFsm.q == testAluFsm.STEP) { // only change states if not HALT
      if (clockEdge.out == b1){ // only change input when LSB of slowCLock changes
       caseidx.d = caseidx.q + 1;
      } 
    }
    
    index = caseidx.q;
    
}

/*
TO DO:
All other truth tables for b01xxxx truth table
Parity ZVN tester?

1st clock cycle: FSM sends x, y  and ALUFN to ALU. ALU computes answer
2nd clock cycle: FSM sends correct answer to ALU, ALU XORs correct answer and computed value, shows error code.

register required to store computed answer for the next clock cycle?
Think of possible error codes.



*/