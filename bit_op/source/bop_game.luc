/*
  Interface for for game components
*/
module bop_game #(
  INPUTS = 3 : INPUTS > 0
  )(
    input clk,  // clock
    input rst,  // reset
    input u_input[INPUTS],
    input start,
    input toggle,
    
    output action[4],
    output level[6], // 2-bit level + 4-bit timer
    output o_input[INPUTS],
    output o_start,
    output st,
    output correct,
    output score[16],
    output bzsel,
    
    output buzzout
  ) {
  .clk(clk) {
    .rst(rst) {
      bop_slwclk_rng slwclk(#FREQ(26), #INPUTS(INPUTS));
      bop_regfile regfile;
      bop_pwm bop_pwm;
      
      bop_controlunit ctrlunit(.slwclk(slwclk.st), .tick(slwclk.tick));
    }
  }
  
  bop_alu_wdsel alu;
  
  sig p_action[INPUTS];
  

  always {
      
    if (~|regfile.level_data) {
      p_action = u_input;
    } else {
      p_action = slwclk.action;
    }
    
    slwclk.level = regfile.level_data;
    slwclk.s_rst = ctrlunit.s_rst | ctrlunit.t_rst;
    
    regfile.reg_abc = c{ctrlunit.ra, ctrlunit.rb, ctrlunit.rc};
    regfile.w_data = alu.out;
    regfile.werf = ctrlunit.werf;
    regfile.s_rst = ctrlunit.s_rst;
    
    regfile.debug_write = 0;
    regfile.wedb = 0;
    
    ctrlunit.level = regfile.level_data;
    ctrlunit.start = start;
    ctrlunit.toggle = toggle;
    ctrlunit.inputs = u_input;
    ctrlunit.flags = alu.aluflags;
    
    alu.alufn = ctrlunit.alufn;
    alu.asel = ctrlunit.asel;
    alu.bsel = ctrlunit.bsel;
    alu.lit = ctrlunit.lit;
    alu.action = p_action;
    alu.timer = regfile.timer_data[4:0];
    alu.wdsel = ctrlunit.wdsel;
    alu.u_input = u_input;
    alu.ra_data = regfile.ra_data;
    alu.rb_data = regfile.rb_data;    
    
    regfile.reg_debug = 0;
    
    // ---- END SETUP ----
    
    level = c{regfile.level_data, regfile.timer_data[3:0]};
    case(|regfile.level_data) {
      b0: o_input = u_input;
      b1: o_input = regfile.input_data[INPUTS-1:0];
      default: o_input = regfile.input_data[INPUTS-1:0];
    }
    
    o_start = start;
    st = slwclk.st;
    action = slwclk.action;
    score = regfile.score_data;
    
    correct = regfile.correct;
    
    bop_pwm.io_button = p_action[2:0];
    bop_pwm.bzsel = ctrlunit.bzsel & slwclk.st;
    buzzout = bop_pwm.out;
    bzsel = ctrlunit.bzsel;
    
  }
}
