/*
  Interface for game modules
   TODO: add IO ports
   
   Note: condition external inputs before passing into this module
*/
module bop_it (
    input clk,  // clock
    input rst,  // reset
    
    input level[2], 
    input u_input[3],
    input start,
    output out
  ) {
  .clk(clk) {
    .rst(rst) {
    bop_slwclk_rng slwclk;
    bop_regfile regfile;
    bop_controlunit ctrlunit(.slwclk(slwclk.st));
    }
    
  }
  sig inputs[4];
  
  bop_alu_wdsel alu;

  always {
    regfile.debug_write = 0;
    regfile.wedb = 0;
    regfile.s_rst = 0;
    ctrlunit.tick = 0;
    slwclk.s_rst=0;
    
    inputs = c{u_input, |u_input};
    
    slwclk.level = regfile.level_data[1:0];
    regfile.werf = ctrlunit.werf;
    regfile.reg_abc = c{ctrlunit.ra, ctrlunit.rb, ctrlunit.rc};
    regfile.w_data = alu.out;
    
    regfile.reg_debug = 0;
    
    ctrlunit.level = level;
    ctrlunit.start = start;
    ctrlunit.rb_data = regfile.rb_data;
    ctrlunit.inputs = u_input;
    ctrlunit.flags = alu.aluflags;
    
    alu.alufn = ctrlunit.alufn;
    alu.asel = ctrlunit.asel;
    alu.bsel = ctrlunit.bsel;
    alu.lit = ctrlunit.lit;
    alu.action = slwclk.action;
    alu.timer = regfile.timer_data[4:0];
    alu.wdsel = ctrlunit.wdsel;
    alu.u_input = u_input;
    alu.ra_data = regfile.ra_data;
    alu.rb_data = regfile.rb_data;
    
    out = 0;
  }
}
