module auto_tester (
    input clk,  // clock
    input rst,  // reset
    input mIn[5],
    output out[16],
    output flags[5],
    output caseidx[16] // unused(4) + alumode(4) + unused(3) + case idx(5)
  ) {
  
  const SLOWCLOCK_DIV = 24; // 26 for 1Hz, use 23 in final
  
  .clk(clk){    
    .rst(rst){
      counter slowClock(#SIZE(2), #DIV(SLOWCLOCK_DIV));
      
      // holding values
      dff aluout[16];
      dff aluflags[5];
      
      dff aluout_rom[16];
      dff aluflags_rom[5];
      
      alu_fsm alufsm (.slwclk(slowClock.value[0]));
    }
    edge_detector risingEdge[2](#RISE(1), #FALL(0));
    edge_detector fallingEdge[2](#RISE(0), #FALL(1));
  }
  
  
  tester_ROM alurom;
  alu alu;

  always {
    out = 0;
    flags = 0;
    caseidx = 0;
    
    fallingEdge.in = slowClock.value;
    risingEdge.in = slowClock.value;
    
    alufsm.mIn = mIn;
    
    // init ROM
    alurom.alu_mode = alufsm.alu_mode;
    alurom.index = alufsm.index;
    caseidx = c{slowClock.value[0], 3b0, alufsm.alu_mode, 3b0, alufsm.index}; // signal for 7seg + display parity
    
    alu.x = alurom.x;
    alu.y = alurom.y;
    alu.alufn = alufsm.alufn_signal;
    
    // verify output matches expected
    alufsm.irq = 0;
    alufsm.irq = ((aluout.q != aluout_rom.q) || (aluflags.q != aluflags_rom.q) ) && (~|alufsm.index == b1);
    
    // update stored outputs on falling edge
    if (fallingEdge.out[0] & 1) {
      aluout.d = alu.out;
      aluflags.d = alu.zvnpc;
      
      aluout_rom.d = alurom.aluout;
      aluflags_rom.d = alurom.flags;
    }
    
    
    // if err sim state
    // aluout = ~alu.out
    
    // case (slowClock.value) {
    //   0:
    //     out = aluout_rom.q;
    //     flags = aluflags_rom.q;
    //   1:
    //     out = aluout.q;
    //     flags = aluflags.q;
    //   2:
    //     out = aluout_rom.q;
    //     flags = aluflags_rom.q;
    //   3:
    //     out = aluout.q;
    //     flags = aluflags.q;
    //     alufsm.irq = ((aluout.q != aluout_rom.q) || (aluflags.q != aluflags_rom.q) ) && (~|alufsm.index == b1) && (&alufsm.index == b0);
        
    //   default:
    //     out = aluout_rom.q;
    //     flags = aluflags_rom.q;
    // }
    
    if (slowClock.value[0] & 1) {
      out = aluout.q;
      flags = aluflags.q;
      alufsm.irq = ((aluout.q != aluout_rom.q) || (aluflags.q != aluflags_rom.q) );
    } else {
      out = aluout_rom.q;
      flags = aluflags_rom.q;
      alufsm.irq = 0;
    }
    
  }
}
