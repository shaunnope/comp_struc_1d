/*
  Tester module
*/
module bop_tester (
    input clk,  // clock
    input rst,  // reset
    input u_input[4],
    input start,
    
    input level[2],    
    output action[4],
    output o_level[6],
    output o_input[4],
    output o_start,
    output st,
    output correct,
    output score[16],
    
    input debug_write[16],
    input reg_debug[3],
    output extra[8]
  ) {
  .clk(clk) {
    .rst(rst) {
      bop_slwclk_rng slwclk(#FREQ(27));
      bop_regfile regfile;
      
      bop_controlunit ctrlunit(.slwclk(slwclk.st), .tick(slwclk.tick));
    }
  }
  
  bop_alu_wdsel alu;
  

  always {
    
    //slwclk.level = level;
    slwclk.level = regfile.level_data[1:0];
    
    regfile.reg_abc = c{ctrlunit.ra, ctrlunit.rb, ctrlunit.rc};
    regfile.w_data = alu.out;
    regfile.werf = ctrlunit.werf;
    regfile.s_rst = ctrlunit.s_rst;
    
    regfile.debug_write = debug_write;
    regfile.wedb = start;
    
    //ctrlunit.level = level;
    ctrlunit.level = regfile.level_data[1:0];
    ctrlunit.start = start;
    ctrlunit.rb_data = regfile.rb_data;
    ctrlunit.inputs = u_input;
    ctrlunit.flags = alu.aluflags;
    
    alu.alufn = ctrlunit.alufn;
    alu.asel = ctrlunit.asel;
    alu.bsel = ctrlunit.bsel;
    alu.lit = ctrlunit.lit;
    alu.action = slwclk.action;
    alu.timer = regfile.timer_data[4:0];
    alu.wdsel = ctrlunit.wdsel;
    alu.u_input = u_input;
    alu.ra_data = regfile.ra_data;
    alu.rb_data = regfile.rb_data;
    
    
    regfile.reg_debug = reg_debug;
    
    // ---- END SETUP ----
    
    o_level = c{regfile.level_data, regfile.timer_data[3:0]};
    case(|regfile.level_data) {
      b0: o_input = u_input;
      b1: o_input = regfile.input_data;
      default: o_input = regfile.input_data;
    }
    
    o_start = start;
    st = slwclk.st;
    action = slwclk.action;
    score = regfile.score_data;
    
    correct = regfile.ra_data[0];
    
    score = regfile.debug_data;
    extra[3:0] = u_input;
    
  }
}
