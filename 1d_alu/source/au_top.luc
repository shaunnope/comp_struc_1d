module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,           // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8] 
  ) {
  
  sig rst;                  // reset signal
  
  sig zvnpc[5];  // flags
  sig out[16];  
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    button_conditioner buttoncond[5];
    
    edge_detector manualControl[3](#RISE(1), #FALL(0));
    
    .rst(rst){
      alu_tester tester;
      manual_tester manual;
      var_seven_seg display;
      dff segdis[14];
    }
  }
  
  sig button_io[5]; // 0: hard reset, 1: back to start of mode, 2: , 3: , 4: , 5:
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off

    usb_tx = usb_rx;        // echo the serial data
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    buttoncond.in = io_button[4:0]; //
    button_io = buttoncond.out;     // conditioned button inputs
    
    manualControl.in = c{button_io[2], button_io[1], button_io[0]}; // rising edge button inputs
    
    // ----------- Test circuit out --------
    
    // out = tester.out;
    // zvnpc = tester.flags;

    manual.ab = c{io_dip[2],io_dip[1]};
    manual.alufn = io_dip[0][4:0];
    manual.nxtIn = manualControl.out[1];
    out = manual.out;
    zvnpc = manual.flags;
    
    io_led[2] = out[15:8];
    io_led[1] = out[7:0];
    io_led[0][4:0] = zvnpc;
    
    io_led[0][7:5] = button_io[2:0];
    io_led[0][7] = tester.caseidx[0];
    
    if (manualControl.out[0] == 1) segdis.d = segdis.q + 1;
    if (manualControl.out[1] == 1) segdis.d = segdis.q + 1111;
    if (manualControl.out[2] == 1) segdis.d = 0;
    
    tester.mCon = manualControl.out;
    
    display.value = segdis.q;
    io_seg = ~display.seg;
    io_sel = display.sel;
    // ------------- END TEST --------------
    
}