module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,           // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8] 
  ) {
  
  sig rst;                  // reset signal
  
  sig alufn[6];
  sig x[16];
  sig y[16];
  sig z;  // zero
  sig v;  // overflow
  sig n;  // negative
  sig p;  // parity: 0 - odd, 1 - even
  
  sig out[16];
  
  // components
  alu alu;
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off

    usb_tx = usb_rx;        // echo the serial data
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    // ----------- TEST 16b alu with 8b inputs
    alufn = io_dip[0][5:0];   // 6b opcode, ala beta isa 
    
    x = 8b0;
    y = 8b0;
    
    // x and y
    x[7:0] = io_dip[1];
    case(alufn[5]) {
      b0: y[7:0] = io_dip[2];
      b1: y[7:0] = io_dip[2]; // change to literal source
      default: y[7:0] = io_dip[2];
    }
    
    alu.alufn = alufn;
    alu.x = x;
    alu.y = y;
    
    z = alu.z;
    v = alu.v;
    n = alu.n;
    p = alu.p;
    
    out = alu.out;
    io_led[1] = out[15:8];
    io_led[2] = out[7:0];
    io_led[0][0] = z;
    io_led[0][1] = v;
    io_led[0][2] = n;
    io_led[0][3] = p;
    // ------------- END TEST
    
}