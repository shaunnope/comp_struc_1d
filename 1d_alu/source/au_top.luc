module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,           // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8],
    
    output buzzout,
    output led_strip,
    output customout[3]
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    button_conditioner buttoncond[5];
    
    .rst(rst){
      tester_bop tester;
    }
  }
  
  sig button_io[5];
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off

    usb_tx = usb_rx;        // echo the serial data
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    buttoncond.in = io_button;      //
    button_io = buttoncond.out;     // conditioned button inputs
    
    customout = 0;
    led_strip = 0;
    buzzout = 0;
    
    // --------------  END INIT  --------------------
    
    tester.usb_rx = usb_rx;
    tester.io_button = button_io;
    tester.io_dip = io_dip;
    
    usb_tx = tester.usb_tx;
    io_seg = tester.io_seg;
    io_sel = tester.io_sel;
    io_led = tester.io_led;
    led = tester.led;
    buzzout = tester.buzzout;
    
    led_strip = tester.strip_led;

    
}