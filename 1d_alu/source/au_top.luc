module au_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,           // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8] 
  ) {
  
  sig rst;                  // reset signal
  
  sig alufn[6];
  sig x[16];
  sig y[16];
  sig zvnp[4];  // flags
  
  sig out[16];
  
  // components
  alu_eight_bit_in alu;
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off

    usb_tx = usb_rx;        // echo the serial data
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    // ----------- TEST 16b alu with 8b inputs
    alufn = io_dip[0][5:0];   // 6b opcode, ala beta isa 
    
    x = 16b0;    // set inputs to 0
    y = 16b0;
    
    // x and y
    x[7:0] = io_dip[1];
    y[7:0] = io_dip[2];
    // case(alufn[5]) {
    //   b0: y[7:0] = io_dip[2];
    //   b1: y[7:0] = io_dip[2]; // change to literal source
    //   default: y[7:0] = io_dip[2];
    // }
    
    alu.alufn = alufn;
    alu.a = x[7:0];
    alu.b = y[7:0];
    
    zvnp[0] = alu.z;
    zvnp[1] = alu.v;
    zvnp[2] = alu.n;
    zvnp[3] = alu.p;
    
    out = alu.out;
    io_led[1][7:0] = out[7:0];
    io_led[2][7:0] = out[15:8];
    io_led[0][3:0] = zvnp;
    // ------------- END TEST --------------
    
}