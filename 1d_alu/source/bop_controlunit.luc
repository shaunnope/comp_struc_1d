module bop_controlunit (
    input clk,  // clock
    input rst,  // reset
    input slwclk,   // Used for stages
    
    input inputs[4], // 3 buttons, 1 nothing
    // input inputs1, //edge detector of the button 1
    // input inputs2,//edge detector of the button 2
    // input inputs3,//edge detector of the button 3
    
    input start,     // start button need edge detector??
    input level[2], // 2 bit to represent 3 levels, 01 = level 1
    
    input rb_data[16],
    input flags[5], // zvnpc

    output alufn[5],
    output asel[2], 
    output bsel[2],
    output werf,
    output wdsel[2],
    output lit[8],
    output rc[3],
    output ra[3],
    output rb[3],
    output bzsel, // Used for sound buzzer
    
    output out
  ) {
  
  .clk(clk){
    fsm game_fsm = {  
      START,
      INCREASE_LEVEL,
      
      // For round & input purposes
      IDLE,
      STORE_INPUT,
      INPUT_IDLE,
      RESET_INPUT,
      PLAY_SOUND,
      CHECK_ACTION,
      UPDATE_LSCORE,
      UPDATE_OSCORE,
      
      // For scoring systems
      ADD_SCORE_LEVEL_1,
      MUL_SCORE_LEVEL_2,
      DIV_SCORE_NEG,
      DIV_SCORE_LEVEL_2,
      ROTL_SCORE_LEVEL_3,
      
      // Handling if end of round
      DISPLAY_SCORE,
      RESET_INPUT,
      INCREASE_TIMER,
      CHECK_ROUND_END,
      BRANCH_ROUND_END,
      
      // Handling if end of game
      RESET_CORRECT,
      UPDATE_SCORE,
      CHECK_LEVEL,
      BRANCH_LEVEL,
      RESET_TIMER,
      
      GAME_END,
      
      // Testing sound purposes
      TEST_SOUND
    }; 
  }

  // ALUFN[4:0] operations
  const ADD = 5b00000;
  const SUB = 5b00001;
  const MUL = 5b00010;
  const DIV = 5b00011;
  const SHL = 5b00100;
  const SHR = 5b00101;
  const ROTL = 5b00110;
  const SRA = 5b00111;
  const CMPEQ = 5b01011;
  const CMPLT = 5b01101;
  const CMPLE = 5b01111;
  const AND = 5b11000;
  const OR = 5b11110;
  const XOR = 5b10110;
  const A = 5b11010;
  const B = 5b11100;

  const SCORE = b000;
  const INPUT = b001;
  const TIMER = b010;
  const LEVEL = b011;
  const LSCORE = b100;
  const OSCORE = b101;
  const CORRECT = b110;
  const R7 = b110;
  
  always {
    // Standard setting unless overwritten by cases
    alufn = 0;
    asel = 0;
    bsel = 0;
    werf = 0;
    wdsel = 0;
    lit = 0;
    rc = 0;
    ra = 0;
    rb = 0;
    bzsel = 0;
    out = 0;

    if (rst) {
      game_fsm.d = game_fsm.START;
    } 
    else {
      case(game_fsm.q) {
        game_fsm.START: // not sure what to add for here
          if(start){
            game_fsm.d = game_fsm.INCREASE_LEVEL;
          }

          if (inputs != 0) {
            game_fsm.d = game_fsm.TEST_SOUND;
          }

        game_fsm.INCREASE_LEVEL:
          alufn = ADD;
          asel = b00;
          bsel = b01;
          werf = b1;
          ra = LEVEL;
          rc = LEVEL;
          wdsel = b00;
          bzsel = 0;

          game_fsm.d = game_fsm.IDLE;

        game_fsm.IDLE:
          if (inputs == 0) {
            game_fsm.d = game_fsm.CHECK_ACTION;
          } else {
            game_fsm.d = game_fsm.STORE_INPUT;
          }

        game_fsm.STORE_INPUT:
          werf = b1;
          rc = INPUT;
          wdsel = b10;
          bzsel = b0;
          game_fsm.d = game_fsm.INPUT_IDLE;

        game_fsm.INPUT_IDLE:
          game_fsm.d = game_fsm.CHECK_ACTION;

        game_fsm.RESET_INPUT:
          alufn = B;
          bsel = b01;
          werf = b1;
          lit = 8h00;
          rc = INPUT;
          wdsel = b00;
          bzsel = b0;
          
          game_fsm.d = game_fsm.PLAY_SOUND;

        game_fsm.PLAY_SOUND:
          game_fsm.d = game_fsm.IDLE;

        game_fsm.CHECK_ACTION:
          alufn = CMPEQ;
          asel = b00;
          bsel = b10;
          werf = b1;
          ra = INPUT;
          rc = CORRECT;
          wdsel = b00;
          bzsel = b0;

          game_fsm.d = game_fsm.UPDATE_LSCORE;

        game_fsm.UPDATE_LSCORE:
          alufn = ADD;
          asel = b0;
          bsel = b01;
          werf = b01;

          // Not sure if this is right
          if (flags[4] == 0) {
            lit = b1;
          } else {
            lit = b0;
          }

          ra = LSCORE;
          rc = LSCORE;
          wdsel = b00;
          bzsel = b0;

          game_fsm.d = game_fsm.UPDATE_OSCORE;

        game_fsm.UPDATE_OSCORE:
          bzsel = b0;

          if (level == b01) {
            game_fsm.d = game_fsm.ADD_SCORE_LEVEL_1;
          } else if (level == b10) {
            // Checking for n flag, this means if its negative LSCORE
            if (flags[2] == 0) {
              game_fsm.d = game_fsm.MUL_SCORE_LEVEL_2;
            } else if (flags[2] == 1) {
              game_fsm.d = game_fsm.DIV_SCORE_LEVEL_2;
            }
          } else if (level == b11) {
            game_fsm.d = game_fsm.ROTL_SCORE_LEVEL_3;
          }

        game_fsm.ADD_SCORE_LEVEL_1:
          alufn = ADD;
          asel = b0;
          bsel = b00;
          werf = b1;
          ra = SCORE;
          rb = LSCORE;
          rc = OSCORE;
          wdsel = b00;
          bzsel = b0;

          game_fsm.d = game_fsm.DISPLAY_SCORE;

        game_fsm.MUL_SCORE_LEVEL_2:
          alufn = MUL;
          asel = b0;
          bsel = b00;
          werf = b1;
          ra = SCORE;
          rb = LSCORE;
          rc = OSCORE;
          wdsel = b00;
          bzsel = b0;

          game_fsm.d = game_fsm.DISPLAY_SCORE;
  
        game_fsm.DIV_SCORE_NEG:
          alufn = SUB;
          asel = b1;
          bsel = b00;
          werf = b1;
          lit = 8h00;
          rb = OSCORE;
          rc = R7;
          wdsel = b00;
          bzsel = b0;

          game_fsm.d = game_fsm.DIV_SCORE_LEVEL_2;

        game_fsm.DIV_SCORE_LEVEL_2:
          alufn = DIV;
          asel = b0;
          bsel = b00;
          werf = b1;
          ra = SCORE;
          rb = LSCORE;
          rc = OSCORE;
          wdsel = b00;
          bzsel = b0;

          game_fsm.d = game_fsm.DISPLAY_SCORE;

        game_fsm.ROTL_SCORE_LEVEL_3:
          alufn = ROTL;
          asel = b0;
          bsel = b00;
          werf = b1;
          ra = SCORE;
          rb = LSCORE;
          rc = OSCORE;
          wdsel = b00;
          bzsel = b0;

          game_fsm.d = game_fsm.DISPLAY_SCORE;

        game_fsm.DISPLAY_SCORE:
          // TODO
          game_fsm.d = game_fsm.RESET_INPUT;

        game_fsm.RESET_INPUT:
          alufn = B;
          bsel = b01;
          werf = b1;
          lit = 8h00;
          rc = INPUT;
          wdsel = b00;
          bzsel = b0;

          game_fsm.d = game_fsm.INCREASE_TIMER;

        game_fsm.INCREASE_TIMER:
          alufn = ADD;
          asel = b0;
          bsel = b01;
          werf = b1;
          lit = 8h01;
          ra = TIMER;
          rc = TIMER;
          wdsel = b00;
          bzsel = b0;

          game_fsm.d = game_fsm.CHECK_ROUND_END;

        game_fsm.CHECK_ROUND_END:
          alufn = B;
          bsel = b11;
          werf = b1;
          rc = R7;
          wdsel = b00;
          bzsel = b0;

          game_fsm.d = game_fsm.BRANCH_ROUND_END;

        game_fsm.BRANCH_ROUND_END:
          werf = b0;
          rb = R7;
          bzsel = b0;

          if (flags[4] == 1) {
            game_fsm.d = game_fsm.IDLE;
          } else if (flags[4] == 0) {
            game_fsm.d = game_fsm.RESET_CORRECT;
          }

        game_fsm.RESET_CORRECT:
          alufn = B;
          bsel = b01;
          werf = b1;
          lit = 8h01;
          rc = CORRECT;
          wdsel = b00;
          bzsel = b0;

          game_fsm.d = game_fsm.UPDATE_SCORE;
          
        game_fsm.UPDATE_SCORE:
          alufn = A;
          asel = b0;
          werf = b1;
          ra = SCORE;
          rc = SCORE;
          wdsel = b00;
          bzsel = b0;
        
          game_fsm.d = game_fsm.CHECK_LEVEL;

        game_fsm.CHECK_LEVEL:
          alufn = CMPLT;
          asel = b0;
          bsel = b01;
          werf = b1;
          lit = 8h08;
          rc = R7;
          wdsel = b00;
          bzsel = b0;

          game_fsm.d = game_fsm.BRANCH_LEVEL;

        game_fsm.BRANCH_LEVEL:
          werf = b0;
          rb = R7;
          bzsel = b0;

          if (rb_data == 0) {
            game_fsm.d = game_fsm.RESET_TIMER;
          } else {
            game_fsm.d = game_fsm.GAME_END;
          }

        game_fsm.RESET_TIMER:
          bsel = b01;
          werf = b1;
          lit = 8h00;
          rc = TIMER;
          wdsel = b00;
          bzsel = b0;

          game_fsm.d = game_fsm.INCREASE_LEVEL;

        game_fsm.GAME_END:
          if (rst == 1) {
            game_fsm.d = game_fsm.START;
          } else if (rst == 0) {
            game_fsm.d = game_fsm.GAME_END;
          }
 
        game_fsm.TEST_SOUND:
          werf = b0;
          bzsel = b1;
          game_fsm.d = game_fsm.START;
          

    }

  }