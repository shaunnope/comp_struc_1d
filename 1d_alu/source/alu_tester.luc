/*
Interface for ROM and FSM
   Inputs: clk and rst signals
   Outputs: alu outputs (out + flags), case index
*/
module alu_tester (
    input clk,  // clock
    input rst,  // reset
    input io_dip[3][8],
    input mCon[5], // 0- toggleAuto
    output out[16],
    output flags[5],
    output caseidx[16] // alumode + case idx
  ) {
  sig togrst; // rst|mCon[0] - reset when toggle mode or reset
  
  .clk(clk){    
    .rst(togrst) {
      manual_tester manual;
      auto_tester auto;
    }
    .rst(rst){
      fsm mode = {MANUAL, AUTO};
    }
  } 
  

  always {
    togrst = rst|mCon[0];
    caseidx = 0;
    
    // init auto tester
    auto.mCon = c{mCon[4:1],b0};
    
    // init manual tester
    manual.ab = c{io_dip[2],io_dip[1]};
    manual.alufn = io_dip[0][4:0];
    manual.nxtIn = mCon[1];
    
    case (mode.q) {
      mode.MANUAL:
        out = manual.out;
        flags = manual.flags;
      mode.AUTO:
        out = auto.out;
        flags = auto.flags;
        caseidx = auto.caseidx;
      default:
        out = 0;
        flags = 0;
    }
    
    if (mCon[0] & 1) { // toggle testing mode
      case (mode.q) {
        mode.MANUAL: mode.d = mode.AUTO;
        mode.AUTO: mode.d = mode.MANUAL;
        default: mode.d = mode.MANUAL;
      }
    }
    
    

  }
}
