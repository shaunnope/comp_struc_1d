module bop_slwclk_rng #(
    FREQ = 26 : FREQ > 0, // 26 for 1Hz
    SEED = 32h129 : SEED > 0
  )(
    input clk,  // clock
    input rst,  // reset
    input level[2],
    output st,
    output action[4]
  ) {
  
  sig slwclk;
  
  decoder decoder(#WIDTH(2));
  
  .clk(clk){
      edge_detector gen_next(#RISE(1), #FALL(0));
    
      .rst(rst){    
        counter slowClock(#SIZE(3), #DIV(FREQ));
        pn_gen rng(.next(gen_next.out), .seed(SEED));
      }
   }
  
  always {
    
    case(level) {
      b00: slwclk = b0;
      b01: slwclk = slowClock.value[2];
      b10: slwclk = slowClock.value[1];
      b11: slwclk = slowClock.value[0];
      default: slwclk = b0;
    }
    
    gen_next.in = slwclk;
    
    st = slwclk;
    decoder.in = rng.num[1:0];
    action = decoder.out;
  }
}
