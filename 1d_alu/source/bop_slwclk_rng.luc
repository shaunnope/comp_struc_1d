module bop_slwclk_rng #(
    FREQ = 26 : FREQ > 0, // 26 for 1Hz
    SEED = 32h129 : SEED > 0,
    INPUTS = 4 : INPUTS > 0
  )(
    input clk,  // clock
    input rst,  // reset
    input s_rst, // soft reset
    input level[2],
    output st,
    output tick,
    output action[INPUTS]
  ) {
  
  sig slwclk;
  
  decoder decoder(#WIDTH($clog2(INPUTS)));
  
  .clk(clk){
      edge_detector gen_next(#RISE(1), #FALL(0));
      edge_detector tick_next(#RISE(1), #FALL(1));
    
      .rst(rst | s_rst){    
        counter slowClock(#SIZE(3), #DIV(FREQ));
      }
      .rst(rst){
        counter ticker(#SIZE(1), #DIV(FREQ/2));
        pn_gen rng(.next(gen_next.out), .seed(SEED));
      }
   }
  
  always {
    
    tick_next.in = ticker.value;
    
    case(level) {
      b00: slwclk = b0;
      b01: slwclk = slowClock.value[2];
      b10: slwclk = slowClock.value[1];
      b11: slwclk = slowClock.value[0];
      default: slwclk = b0;
    }
    
    gen_next.in = slwclk;
    
    st = slwclk;
    tick = tick_next.out;
    decoder.in = (c{$clog2(INPUTS)x{b0}, rng.num[7:0]}*INPUTS) >> 8;
    action = decoder.out;

  }
}
