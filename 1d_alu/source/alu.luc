module alu (
    input alufn[6],  //
    input x[16],     //
    input y[16],     //
    output z,        // zero
    output v,        // overflow
    output n,        // negative
    output p,        // parity
    output c,
    output out[16]
  ) {
  sig w[16];
  // components
  sixteen_bit_full_adder adder;
  sixteen_bit_compare compare;
  sixteen_bit_bool boole;
  sixteen_bit_mult mult;
  sixteen_bit_shifter shifter;

  op_flags flags;
  always {   
    // init adder
    adder.alufn = alufn[0];
    adder.x = x;
    adder.y = y;
    
    // init compare
    compare.alufn = alufn[2:1];
    compare.z = adder.z;
    compare.v = adder.v;
    compare.n = adder.n;
    
    // init mult
    mult.alufn = alufn[0];
    mult.x = x;
    mult.y = y;
    
    // init boole
    boole.alufn = alufn[3:0];
    boole.x = x;
    boole.y = y;
    
    // init shifter
    shifter.alufn = alufn[1:0];
    shifter.x = x;
    shifter.shift = y[3:0];
    
    // select output
    case(alufn[5:4]) {
      b00: w = adder.out;
      b01: w = boole.out;
      b10: w = shifter.out;
      b11: w = compare.out;
      default: w = adder.out;
    }
    
    if(alufn[5:1] == b00001) {
      w = mult.out;
    }
    //init flags
    flags.x = x;
    flags.y = y;
    flags.alufn = alufn;
    flags.aluout = w;
    
    z = flags.z;
    v = flags.v;
    n = flags.n;
    p = flags.p;
    c = adder.cout;
    
    out = w;
  }
}
