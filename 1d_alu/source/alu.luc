/**
ALUFN signals
0 0 0000: ADD
0 0 0001: SUB
0 0 0010: MUL
0 0 0011: DIV
0 1 1000: AND
0 1 1110: OR
0 1 0110: XOR
0 1 1010: "A"
0 1 1100: "B" // Added
1 0 0000: SHL
1 0 0001: SHR
1 0 0011: SRA
1 0 0100: ROL // Added
1 1 0011: CMPEQ
1 1 0101: CMPLT
1 1 0111: CMPLE
1 ZYXW: Bool with truth table 00 - W, 01 - X, 10 - Y, 11 - Z
*/

module alu (
    input alufn[6],  //
    input x[16],     //
    input y[16],     //
    output zvnpc[5], // flags: c only determined by ADD SUB MULT. ordered in little endian
    output out[16]
  ) {
  sig w[17];         // output w cout
  // components
  sixteen_bit_full_adder adder;
  sixteen_bit_compare compare;
  sixteen_bit_bool boole;
  sixteen_bit_mult mult;
  sixteen_bit_shifter shifter;

  op_flags flags;
  always {   
    // init adder
    adder.alufn = alufn[0];
    adder.x = x;
    adder.y = y;
    
    // init compare
    compare.alufn = alufn[2:1];
    compare.z = adder.z;
    compare.v = adder.v;
    compare.n = adder.n;
    
    // init mult
    mult.alufn = alufn[0];
    mult.x = x;
    mult.y = y;
    
    // init boole
    boole.alufn = alufn[3:0];
    boole.x = x;
    boole.y = y;
    
    // init shifter
    shifter.alufn = alufn[2:0];
    shifter.x = x;
    shifter.shift = y[3:0];
    
    w = 17b0;
    
    // select output
    if(alufn[5] & 1) {
      if (alufn[4] & 1) {
        w[15:0] = compare.out; // CMPEQ, CMPLT, CMPLE
      } else {
        w[15:0] = shifter.out; // SHL, SHR, SRA, ROL
      }
    } else if (alufn[4] & 1) {
      w[15:0] = boole.out; // AND, OR, XOR, "A", "B"
    } else if (alufn[1] & 1) {
      w[16:0] = mult.out;
    } else {
      w[16:0] = adder.out;
    }
      
    //init flags
    flags.x = x;
    flags.y = y;
    flags.alufn = alufn;
    flags.aluout = w;
    
    zvnpc[4] = flags.z;
    zvnpc[3] = flags.v;
    zvnpc[2] = flags.n;
    zvnpc[1] = flags.p;
    zvnpc[0] = w[16];
    
    out = w[15:0];
  }
}
