/*
  Interface game to IO components
*/
module tester_bop (
    input clk,              // 100MHz clock
    input rst,              // reset
    output led[8],          // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8],
    
    output buzzout,
    output strip_led
  ) {
  
  .clk(clk) {
      .rst(rst){
        bop_tester tester;
        var_seven_seg display;
        bop_led led_strip;
        // bop_pwm bop_pwm;
      }
    }
  
  encoder action(#WIDTH(4));
  
  always {
  
    led = 8h00;             // turn LEDs off

    usb_tx = usb_rx;        // echo the serial data
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    strip_led = 0;
    
    // ----------- Test circuit out --------
    
    tester.reg_debug = io_dip[2][2:0];
    tester.debug_write = c{8x{io_dip[1][7]}, io_dip[1]};
    
    tester.u_input = io_button[2:0];
    tester.start = io_button[0];
    
    led[7] = tester.st;       // blinker
    io_led[1][7] = tester.st;
    
    io_led[0][3:0] = tester.o_input;
    io_led[2][7] = tester.o_start;
    io_led[2][5:0] = tester.level;
    
    io_led[1][3:0] = tester.action;

    //bop pwm code
    // bop_pwm.io_button = io_button[3:0];
    // bop_pwm.bzsel = b1;
    // buzzout = bop_pwm.out;

    display.value = c{{c{tester.st, 3b0, tester.debug_out[15:12]}},{c{4b0, tester.debug_out[11:8]}},
                      {c{4b0, tester.debug_out[7:4]}},{c{4b0, tester.debug_out[3:0]}}};
    
    io_seg = display.seg;
    io_sel = display.sel;
    
    action.in = tester.action;
    
    if (|tester.level[5:4]) {
      if (tester.st) {
        led_strip.pixels = 16hffff;
        led_strip.color = action.out + 2;
      } else {
        led_strip.pixels = tester.score;
        led_strip.color = tester.correct;
      }
    } else {
      led_strip.pixels = tester.score;
      led_strip.color = 1;
    }
    
    //led_strip.color = io_dip[1][2:0]; // debug - manual set color
    strip_led = led_strip.out;
    
    
    buzzout = tester.buzzout;
    
}