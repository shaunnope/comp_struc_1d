module tester_bop (
    input clk,              // 100MHz clock
    input rst,              // reset
    output led[8],          // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx,          // USB->Serial output
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8] 
  ) {
  
  .clk(clk) {
    edge_detector risingEdge[5](#RISE(1), #FALL(0));
      .rst(rst){
        bop_tester tester;
        var_seven_seg display;
      }
    }
  
  always {
  
    led = 8h00;             // turn LEDs off

    usb_tx = usb_rx;        // echo the serial data
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    
    risingEdge.in = io_button; // rising edge button inputs
    
    // ----------- Test circuit out --------
    
    tester.reg_debug = io_dip[2][2:0];
    tester.debug_write = io_dip[1];
    
    tester.level = io_dip[0][1:0];
    tester.u_input = io_button[3:0];
    tester.start = io_button[4];
    
    led[7] = tester.st;       // blinker
    io_led[1][7] = tester.st;
    
    io_led[0][7:6] = tester.o_level;
    io_led[0][3:0] = tester.o_input;
    io_led[2][7] = tester.o_start;
    
    io_led[1][3:0] = tester.action;
    
    //display.value = c{{8d66},{8d66},{c{tester.st,7d66}},{c{4b0,tester.action}}};
    display.value = c{{c{tester.st, 3b0, tester.score[15:12]}},{c{4b0, tester.score[11:8]}},
                      {c{4b0, tester.score[7:4]}},{c{4b0, tester.score[3:0]}}};
    
    io_seg = display.seg;
    io_sel = display.sel;
    // ------------- END TEST --------------
    
}